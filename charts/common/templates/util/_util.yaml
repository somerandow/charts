{{- /*
common.util.merge will merge two YAML templates and output the result.
This takes an array of three values:
- the top context
- the template name of the overrides (destination)
- the template name of the base (source)
*/}}
{{- define "common.util.merge" -}}
{{- $top := first . -}}
{{- $overrides := fromYaml (include (index . 1) $top) | default (dict ) -}}
{{- $tpl := fromYaml (include (index . 2) $top) | default (dict ) -}}
{{- toYaml (merge $overrides $tpl) -}}
{{- end -}}

{{- /*
common.util.resourceName sets the name of a resource based on the chart and release name, and optionally, a
manually specified resource name to be appended to the generated name.
In the event the release and chart names are the same, it will simply use the release name to
avoid ugly names generated by simply combining the two.

*/}}
{{- define "common.util.resourceName" -}}
{{- $rootCtx := .rootCtx -}}
{{- $extraResourceName := .extraResourceName -}}
{{- if eq $rootCtx.Release.Name $rootCtx.Chart.Name -}}
  {{- $extraResourceName | printf "%s-%s" $rootCtx.Release.Name -}}
{{- else -}}
  {{- $rootCtx.Release.Name | printf "%s-%s" $rootCtx.Chart.Name | printf "%s-%s" $extraResourceName -}}
{{- end -}}
{{- end -}}

{{/*
Merge the chart values with values defined in common chart
*/}}
{{- define "common.values.merge" -}}
{{- if .Values.common -}}
  {{- $defaultValues := deepCopy .Values.common -}}
  {{- $chartValues := deepCopy (omit .Values "common") -}}
  {{- $mergedValues := mustMergeOverwrite $defaultValues $chartValues -}}
  {{- $_ := set . "Values" (deepCopy $mergedValues) -}}
{{- end -}}
{{- end -}}