variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

stages:
  - test
  - release

default:
  image: quay.io/helmpack/chart-testing:latest
  tags:
    - homelab

chart:lint:
  variables:
    ALL_CHARTS: ${ALL_CHARTS:-"false"}
    CLUSTER_NAME: ${CI_PIPELINE_ID}-${K8S_VERSION}
    GIT_DEPTH: 50
    GIT_STRATEGY: clone
  before_script:
    - git remote -v
    - git fetch
  script:
    - |
      CHANGED_CHARTS=$(ct list-changed --config .gitlab/ct.yaml)
      CT_FLAGS=(--config .gitlab/ct.yaml --lint-conf .gitlab/lint.yaml --helm-repo-extra-args "wojoinc-charts=--username gitlab-ci-token --password ${CI_JOB_TOKEN}")

      if [[ $ALL_CHARTS == "true" ]]; then
        CT_FLAGS+=(--all)
      fi

      echo "Detected changes in charts:"
      echo "${CHANGED_CHARTS[*]}"

      ct lint "${CT_FLAGS[@]}"
      echo "CHANGED_CHARTS=$CHANGED_CHARTS" >> variables.env
      echo "Printing env file"
      cat variables.env
  artifacts:
    reports:
      dotenv: variables.env
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      changes:
        paths:
          - charts/*/Chart.yaml

# chart:install:
#   variables:
#     ALL_CHARTS: ${ALL_CHARTS:-"false"}
#     CLUSTER_NAME: ${CI_PIPELINE_ID}-${K8S_VERSION}
#     GIT_DEPTH: 50
#     GIT_STRATEGY: clone
#   before_script:
#     - git remote -v
#     - git fetch
#     - |
#       echo "Install packages..."
#       echo "@testing https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
#       apk update
#       apk add kind@testing docker
#     - |
#       echo "Install kind"
#       kind create cluster --config .gitlab/kind-cluster-config.yaml --name "${CI_PIPELINE_ID}-${K8S_VERSION}" --image "kindest/node:v${K8S_VERSION}" --wait 5m
#       sed -i -e "s/0.0.0.0/kubernetes/g" $HOME/.kube/config
#     - |
#       echo "Check kind was installed"
#       kubectl cluster-info --context kind-${CI_PIPELINE_ID}-${K8S_VERSION}
#   script:
#     - |
#       CT_FLAGS=(--config .gitlab/ct.yaml --helm-repo-extra-args "wojoinc-charts=--username gitlab-ci-token --password ${CI_JOB_TOKEN}")

#       if [[ $ALL_CHARTS == "true" ]]; then
#         CT_FLAGS+=(--all)
#       fi

#       kubectl config set-context kind-${CI_PIPELINE_ID}-${K8S_VERSION}
#       ct install "${CT_FLAGS[@]}"
#   after_script:
#     - |
#       echo "Deleting kind cluster..."
#       kind delete cluster --name "$CLUSTER_NAME"
#   tags:
#     - gitlab-org-docker
#   parallel:
#     matrix:
#       - K8S_VERSION:
#           - 1.27.3
#           - 1.29.4
#   services:
#     - name: docker:dind
#       # Instead of "docker" use a DNS alias that kind includes in the SAN list
#       # when bootstrapping control-plane cert
#       alias: kubernetes
#   needs:
#     - chart:lint
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#       when: never
#     - if: $CI_COMMIT_TAG
#       when: never
#     - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
#       changes:
#         paths:
#           - charts/*/Chart.yaml

chart:install:
  variables:
    ALL_CHARTS: ${ALL_CHARTS:-"false"}
    CLUSTER_NAME: "homelab"
    SERVICE_ACCOUNT: "gitlab-runner"
    CLUSTER_API: "https://10.2.0.1:443"
    NAMESPACE: "gitlab-runner"
    GIT_DEPTH: 50
    GIT_STRATEGY: clone
    VAULT_ADDR: "https://vault.vault:8200"
  id_tokens:
    HOMELAB_VAULT_JWT:
      aud: "vault://homelab.wojoinc.xyz"
    
  before_script:
    - git remote -v
    - git fetch
    - |
      echo "Install packages..."
      apk update
      apk add jq
    - |
      echo "Get K8s service account token"
      echo -e "{\"role\": \"gitlab-gitlab-runner\", \"jwt\": \"$HOMELAB_VAULT_JWT\"}" > payload.json
      export VAULT_TOKEN=$(curl -k --data @payload.json "$VAULT_ADDR/v1/auth/gitlab/login" | jq -r .auth.client_token)
      echo '{"ttl": "1h"}' > payload.json
      curl -kvvv -H "X-Vault-Token: $VAULT_TOKEN" --data @payload.json "$VAULT_ADDR/v1/$CLUSTER_NAME/creds/gitlab-runner"
      export SA_TOKEN="$(curl -k -H "X-Vault-Token: $VAULT_TOKEN" --data @payload.json "$VAULT_ADDR/v1/$CLUSTER_NAME/creds/gitlab-runner" | jq -r .data.service_account_token)"
      echo $SA_TOKEN
      echo "Setup kubectl context..."
      mkdir -p $CI_PROJECT_DIR/.kube
      kubectl config set-credentials $CLUSTER_NAME/$SERVICE_ACCOUNT --token=$SA_TOKEN --kubeconfig=$CI_PROJECT_DIR/.kube/config
      kubectl config set-cluster $CLUSTER_NAME --insecure-skip-tls-verify=true --server=$CLUSTER_API --kubeconfig=$CI_PROJECT_DIR/.kube/config
      kubectl config set-context $CLUSTER_NAME/$NAMESPACE/$SERVICE_ACCOUNT --user=$CLUSTER_NAME/$SERVICE_ACCOUNT --namespace=$NAMESPACE --cluster=$CLUSTER_NAME --kubeconfig=$CI_PROJECT_DIR/.kube/config
      kubectl config use-context $CLUSTER_NAME/$NAMESPACE/$SERVICE_ACCOUNT --kubeconfig=$CI_PROJECT_DIR/.kube/config
    - |
      echo "Check cluster access..."
      KUBECONFIG=$CI_PROJECT_DIR/.kube/config kubectl cluster-info --context $CLUSTER_NAME/$NAMESPACE/$SERVICE_ACCOUNT
  script:
    - |
      export KUBECONFIG=$CI_PROJECT_DIR/.kube/config
      CT_FLAGS=(--config .gitlab/ct.yaml --helm-repo-extra-args "wojoinc-charts=--username gitlab-ci-token --password ${CI_JOB_TOKEN}")

      if [[ $ALL_CHARTS == "true" ]]; then
        CT_FLAGS+=(--all)
      fi

      kubectl config set-context $CLUSTER_NAME/$NAMESPACE/$SERVICE_ACCOUNT
      ct install "${CT_FLAGS[@]}"
  tags:
    - homelab
  needs:
    - chart:lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      changes:
        paths:
          - charts/*/Chart.yaml

chart:package:
  stage: release
  script:
    - |
      chart="charts/$(echo $CI_COMMIT_TAG | cut -d '-' -f 1)"
      mkdir -p target/
      helm registry login registry.gitlab.com/wojoinc/helm-charts -u gitlab-ci-token -p $GIT_PASSWORD
      helm dependency update $chart
      helm package -d target $chart
      helm push target/* oci://registry.gitlab.com/wojoinc/helm-charts
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_TAG
      when: always

create_tag:
  variables:
    GIT_DEPTH: 50
    GIT_STRATEGY: clone
  before_script:
    - git remote -v
    - git fetch
  script:
    - |
      git config user.name "Chart Tagger"
      git config user.email "chart-tag@wojoinc.xyz"
      git remote set-url --push origin "https://gitlab-ci-token:$GIT_PASSWORD@gitlab.com/WojoInc/helm-charts.git"
      CHANGED_CHARTS=$(ct list-changed --since "HEAD~1" --config .gitlab/ct.yaml)
      echo "Detected changes in charts:"
      echo "${CHANGED_CHARTS[*]}"
      for chart in $CHANGED_CHARTS; do
        version=$(grep "^version:" "${chart}/Chart.yaml" | awk '{print $2}')
        shortname=$(echo $chart | cut -d '/' -f 2)
        git tag $shortname-$version
        git push origin tag $shortname-$version  
      done
      echo "CHANGED_CHARTS=$CHANGED_CHARTS" >> variables.env
      echo "Printing env file"
      cat variables.env
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        paths:
          - charts/*/Chart.yaml
